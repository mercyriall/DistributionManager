import asyncio
from aiogram import types, F, Router, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, IS_NOT_MEMBER, ADMINISTRATOR
import os
from dotenv import load_dotenv

import interface_bot.keyboards as keyboards
from utils.check_link import check_linked_soc_list
from utils.check_link import check_for_buttons
from utils.post_functions import post_tg, post_tw, post_vk
from database.init_db import database as db

load_dotenv()

abs_path_2_project = os.getenv('ABSOLUTE_PATH_FOR_PROJECT')

router = Router()

greetings = ["–ø—Ä–∏–≤–µ—Ç", "privet", "qq", "–∑–∫—à–º—É–µ", "ghbdtn"]

networks = ["–í–∫–æ–Ω—Ç–∞–∫—Ç–µ", "Twitter", "Telegram"]

channel_start = "-100"


# –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
class UserInput(StatesGroup):
    vk_inputing_cookie = State()
    vk_inputing_link = State()
    vk_unsigning = State()
    tw_inputing_cookie = State()
    tw_unsigning = State()
    tg_inputing_channel = State()
    tg_adding_admin = State()
    getting_images = State()
    gathering_info = State()
    posting = State()
    images_for_post_dict ={}
    text_for_post_dict = {}
    posting_socs_dict = {}


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éüéì")
async def menu_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º - –ø–æ—Å–µ—Ç–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É GitHub –ø—Ä–æ–µ–∫—Ç–∞: "
                     "https://github.com/mercyriall/DistributionManager", keyboards.kb_menu)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
@router.message(F.text == "–ú–µ–Ω—é‚ò∞")
async def menu_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ‚¨áÔ∏è.",
                     reply_markup=keyboards.kb_menu)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–µ–π
@router.message(F.text == "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ—Ü. —Å–µ—Ç–∏üìù")
async def check_networks_handler(msg: Message):
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Çüí¨")
async def create_post_handler(msg: Message, state: FSMContext):
    count = 0
    net_list = await check_linked_soc_list(msg)
    for elem in net_list:
        if elem == 0:
            count += 1
    if count == len(net_list):
        await msg.answer("–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–µ—Ç—å.",
                         reply_markup=keyboards.kb_menu)
    else:
        await msg.answer("–û–∫–µ–π, –≤—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ –ø–æ—Å—Ç—É?\n"
                         "–ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
                         "–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—Å—Ç\","
                         "–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞.\n"
                         "–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–µ—Ç\"",
                         reply_markup=keyboards.kb_no)
        await state.set_state(UserInput.getting_images)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
@router.message(UserInput.getting_images, F.photo)
async def image_uploading(msg: Message, bot: Bot):
    if msg.from_user.id not in UserInput.images_for_post_dict:
        UserInput.images_for_post_dict[msg.from_user.id] = [msg.photo[-1].file_id]
    else:
        UserInput.images_for_post_dict[msg.from_user.id] = UserInput.images_for_post_dict.get(msg.from_user.id, []) + \
                                                           [msg.photo[-1].file_id]
        print(UserInput.images_for_post_dict)
    path = 'database/images'

    os.chdir(path)
    if not os.path.isdir(str(msg.from_user.id)):
        os.mkdir(str(msg.from_user.id))
        print('–ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
    os.chdir('../..')

    await bot.download(
        msg.photo[-1],
        destination=f"{path}/{msg.from_user.id}/{msg.photo[-1].file_id}.jpg"
    )
    await msg.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", reply_markup=keyboards.kb_continue)
    print(UserInput.images_for_post_dict)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(UserInput.getting_images, F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—Å—Ç‚úèÔ∏è")
async def continue_post(msg: Message, state: FSMContext):
    await state.set_state(UserInput.gathering_info)
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:", reply_markup=keyboards.kb_cancel)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
@router.message(UserInput.getting_images, F.text != "–ù–µ—Ç‚ùå")
async def image_error(msg: Message, state: FSMContext):
    await msg.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏?–ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ –∏ "
                     "–Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ—Å—Ç\" –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é.",
                     reply_markup=keyboards.kb_cancel)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞
@router.message(UserInput.getting_images, F.text == "–ù–µ—Ç‚ùå")
async def continue_posting(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–•–æ—Ä–æ—à–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                     reply_markup=keyboards.kb_cancel)
    await state.set_state(UserInput.gathering_info)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∏–Ω–≥–∞
@router.message(UserInput.gathering_info, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É‚ùå")
async def cancel_posting(msg: Message, state: FSMContext, bot: Bot):
    path = 'database/images'
    os.chdir(f'{path}/{str(msg.from_user.id)}')
    for paths, dirs, files in os.walk(os.getcwd()):
        for file in files:
            os.remove(file)
        break
    os.chdir('../../..')
    UserInput.images_for_post_dict[msg.from_user.id] = []
    UserInput.text_for_post_dict[msg.from_user.id] = []
    await state.clear()
    await msg.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.",
                     reply_markup=keyboards.kb_menu)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å—Ç–∏—Ç—å —Å–æ—Ü —Å–µ—Ç–∏ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ
@router.message(UserInput.gathering_info, F.text == "üî¥ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def unselecting_vk(msg: Message, bot: Bot):
    await bot.delete_message(msg.from_user.id, (msg.message_id - 1))
    await bot.delete_message(msg.from_user.id, msg.message_id)
    for elem in UserInput.posting_socs_dict:
        if elem == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ":
            UserInput.posting_socs_dict[elem] = 1
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
        reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø–æ—Å—Ç–∏—Ç—å —Å–æ—Ü —Å–µ—Ç–∏ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ
@router.message(UserInput.gathering_info, F.text == "üü¢ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def selecting_vk(msg: Message, bot: Bot):
    await bot.delete_message(msg.from_user.id, (msg.message_id - 1))
    await bot.delete_message(msg.from_user.id, msg.message_id)
    for elem in UserInput.posting_socs_dict:
        if elem == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ":
            UserInput.posting_socs_dict[elem] = 0
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
        reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å—Ç–∏—Ç—å —Å–æ—Ü —Å–µ—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º
@router.message(UserInput.gathering_info, F.text == "üî¥ Telegram")
async def unselecting_tg(msg: Message, bot: Bot):
    await bot.delete_message(msg.from_user.id, (msg.message_id - 1))
    await bot.delete_message(msg.from_user.id, msg.message_id)
    for elem in UserInput.posting_socs_dict:
        if elem == "Telegram":
            UserInput.posting_socs_dict[elem] = 1
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
        reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø–æ—Å—Ç–∏—Ç—å —Å–æ—Ü —Å–µ—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º
@router.message(UserInput.gathering_info, F.text == "üü¢ Telegram")
async def selecting_tg(msg: Message, bot: Bot):
    await bot.delete_message(msg.from_user.id, (msg.message_id - 1))
    await bot.delete_message(msg.from_user.id, msg.message_id)
    for elem in UserInput.posting_socs_dict:
        if elem == "Telegram":
            UserInput.posting_socs_dict[elem] = 0
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
        reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å—Ç–∏—Ç—å —Å–æ—Ü —Å–µ—Ç–∏ —Ç–≤–∏—Ç—Ç–µ—Ä
@router.message(UserInput.gathering_info, F.text == "üî¥ Twitter")
async def unselecting_tw(msg: Message, bot: Bot):
    await bot.delete_message(msg.from_user.id, (msg.message_id - 1))
    await bot.delete_message(msg.from_user.id, msg.message_id)
    for elem in UserInput.posting_socs_dict:
        if elem == "Twitter":
            UserInput.posting_socs_dict[elem] = 1
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
        reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø–æ—Å—Ç–∏—Ç—å —Å–æ—Ü —Å–µ—Ç–∏ —Ç–≤–∏—Ç—Ç–µ—Ä
@router.message(UserInput.gathering_info, F.text == "üü¢ Twitter")
async def selecting_tw(msg: Message, bot: Bot):
    await bot.delete_message(msg.from_user.id, (msg.message_id - 1))
    await bot.delete_message(msg.from_user.id, msg.message_id)
    for elem in UserInput.posting_socs_dict:
        if elem == "Twitter":
            UserInput.posting_socs_dict[elem] = 0
    print(UserInput.posting_socs_dict)
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
        reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.message(UserInput.gathering_info, F.text == "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Çüì¢")
async def posting_with_out_ai(msg: Message, state: FSMContext, bot: Bot):
    count = 0
    for elem in UserInput.posting_socs_dict:
        if UserInput.posting_socs_dict[elem] == 0:
            count += 1
    if count == len(UserInput.posting_socs_dict):
        await state.clear()
        await msg.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å–æ—Ü —Å–µ—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –µ—â—ë —Ä–∞–∑",
                         reply_markup=keyboards.kb_menu)
    else:
        await state.set_state(UserInput.posting)
        await msg.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞?\n–í —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, "
                         "–≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç, –∞ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—Ü. —Å–µ—Ç–∏ –ø–æ—Å—Ç, "
                         "–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å —Å–º—ã—Å–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞, –Ω–æ –Ω–∞–ø–∏—Å–∞–Ω –±—É–¥–µ—Ç –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
                         "\n–í —Å–ª—É—á–∞–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤—Å–µ —Å–æ—Ü. —Å–µ—Ç–∏ –ø–æ–ª—É—á–∞—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø–æ—Å—Ç.",
                         reply_markup=keyboards.kb_yes_no)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞
@router.message(UserInput.posting, F.text == "–î–∞‚úîÔ∏è")
async def posting_with_ai(msg: Message, state: FSMContext, bot: Bot):
    for elem in UserInput.posting_socs_dict:
        if elem == "Telegram" and UserInput.posting_socs_dict[elem] == 1:
            await post_tg(UserInput.images_for_post_dict, UserInput.text_for_post_dict, msg, bot)
            await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –¢–µ–ª–µ–≥—Ä–∞–º.")
        if elem == "Twitter" and UserInput.posting_socs_dict[elem] == 1:
            await post_tw(UserInput.text_for_post_dict, msg, True)
            await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –¢–≤–∏—Ç—Ç–µ—Ä.")
        if elem == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ" and UserInput.posting_socs_dict[elem] == 1:
            await post_vk(UserInput.text_for_post_dict, msg, True)
            await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ.")
    await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö.",
                     reply_markup=keyboards.kb_menu)
    path = 'database/images'
    os.chdir(f'{path}/{str(msg.from_user.id)}')
    for paths, dirs, files in os.walk(os.getcwd()):
        for file in files:
            os.remove(file)
        break
    os.chdir('../../..')
    await state.clear()
    UserInput.images_for_post_dict[msg.from_user.id] = []
    UserInput.text_for_post_dict[msg.from_user.id] = ''


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞
@router.message(UserInput.posting, F.text == "–ù–µ—Ç‚ùå")
async def posting_without_ai(msg: Message, state: FSMContext, bot: Bot):
    for elem in UserInput.posting_socs_dict:
        if elem == "Telegram" and UserInput.posting_socs_dict[elem] == 1:
            await post_tg(UserInput.images_for_post_dict, UserInput.text_for_post_dict, msg, bot)
            await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –¢–µ–ª–µ–≥—Ä–∞–º.")
        if elem == "Twitter" and UserInput.posting_socs_dict[elem] == 1:
            await post_tw(UserInput.text_for_post_dict, msg, False)
            await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –¢–≤–∏—Ç—Ç–µ—Ä.")
        if elem == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ" and UserInput.posting_socs_dict[elem] == 1:
            await post_vk(UserInput.text_for_post_dict, msg, False)
            await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ.")
    await msg.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö.",
                     reply_markup=keyboards.kb_menu)
    path = 'database/images'
    os.chdir(f'{path}/{str(msg.from_user.id)}')
    for paths, dirs, files in os.walk(os.getcwd()):
        for file in files:
            os.remove(file)
        break
    os.chdir('../../..')
    await state.clear()
    UserInput.images_for_post_dict[msg.from_user.id] = []
    UserInput.text_for_post_dict[msg.from_user.id] = ''


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ü —Å–µ—Ç–µ–π –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
@router.message(UserInput.gathering_info)
async def soc_select(msg: Message,):
    UserInput.posting_socs_dict = await check_for_buttons(msg)
    UserInput.text_for_post_dict[msg.from_user.id] = msg.text
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ—Å—Ç–∏—Ç—å:\n"
                     "–ß—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ü —Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–π.",
                     reply_markup=keyboards.reply_kb_builder_soc(UserInput.posting_socs_dict).as_markup(
                         resize_keyboard=True,
                         input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ")
                     )


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ
@router.message(StateFilter(None), F.text == "üî¥ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk_input_cookie(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \".txt\"."
                     "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.vk_inputing_cookie)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –∫—É–∫–∏ –¥–ª—è –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ
@router.message(UserInput.vk_inputing_cookie, F.document)
async def vk_cookie_inputed(msg: Message, state: FSMContext, bot: Bot):
    extension = '.txt'
    path = 'database/uploaded_cookies'
    if extension in str(msg.document.file_name):
        os.chdir(path)
        if not os.path.isdir(str(msg.from_user.id)):
            os.mkdir(str(msg.from_user.id))
            print('–ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
        print(os.getcwd())
        os.chdir('../..')

        await bot.download(
            msg.document.file_id,
            destination=f"{path}/{str(msg.from_user.id)}/vk_cookie.txt"
        )

        await db.update_cookie(msg.from_user.id, "vk_cookie.txt")
        await msg.answer("–ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
        os.chdir(f'{path}/{str(msg.from_user.id)}')
        for paths, dirs, files in os.walk(os.getcwd()):
            for file in files:
                os.remove(file)
            break
        os.chdir('../../..')
        await state.clear()
        if (await db.check_link_vk(msg.from_user.id)) is False:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∏–Ω–≥.",
                             reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(UserInput.vk_inputing_link)
        else:
            networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

            await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                             reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                                 resize_keyboard=True,
                                 input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º \".txt\"?")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ
@router.message(UserInput.vk_inputing_link)
async def vk_link_inputed(msg: Message, state: FSMContext, bot: Bot):
    start = 'https://vk.com/'
    if start in str(msg.text):
        await db.insert_link_vk(msg.from_user.id, msg.text)
        await msg.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É: {msg.text}")
        await state.clear()
        networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

        await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                         reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                             resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫—É–∫–∏
@router.message(F.text == "üü¢ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk_handler(msg: Message, state: FSMContext):
    await msg.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                     reply_markup=keyboards.kb_change_link)
    await state.set_state(UserInput.vk_unsigning)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ —Å–æ—Ü —Å–µ—Ç–∏
@router.message(UserInput.vk_unsigning, F.text == "–û—Ç–≤—è–∑–∞—Ç—å —Å–æ—Ü. —Å–µ—Ç—åüóëÔ∏è")
async def vk_unsigning(msg: Message, state: FSMContext):
    await db.delete_vk_cookie(msg.from_user.id)
    await db.delete_link_vk(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü. —Å–µ—Ç—å.")
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    await state.clear()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å—Ç–∏–Ω–≥–∞
@router.message(UserInput.vk_unsigning, F.text == "–ü–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∏–Ω–≥–∞")
async def vk_unsigning(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∏–Ω–≥.",
                     reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.vk_inputing_link)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ—Ü —Å–µ—Ç–∏
@router.message(F.text == "üî¥ Telegram")
async def tg_handler(msg: Message, state: FSMContext):
    await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å, –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                     reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.tg_inputing_channel)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ—Ü —Å–µ—Ç–∏
@router.message(UserInput.tg_inputing_channel)
async def tg_inputer(msg: Message, state: FSMContext):
    if msg.forward_origin:
        await db.insert_tg_channel_id(msg.from_user.id, str(msg.forward_origin.chat.id))
        await msg.answer("Id —á–∞—Ç–∞ —Ç–≥ –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

    elif channel_start in msg.text:
        await db.insert_tg_channel_id(msg.from_user.id, msg.text)
        await msg.answer("Id —á–∞—Ç–∞ —Ç–≥ –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ Id —á–∞—Ç–∞? Id —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å \"-100\"",
                         reply_markup=types.ReplyKeyboardRemove())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> ADMINISTRATOR))
async def tg_adding_admn(msg: Message, bot: Bot):
    await bot.send_message(msg.from_user.id,"–¢–µ–ø–µ—Ä—å —è –∞–¥–º–∏–Ω, –ø–æ—Å—Ç–∏–Ω–≥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏–≤—è–∑–∞–Ω.")
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=ADMINISTRATOR >> IS_NOT_MEMBER))
async def tg_adding_admn(msg: Message, bot: Bot):
    await db.delete_tg_channel_id(msg.from_user.id)
    await bot.send_message(msg.from_user.id,
                           "–ú–µ–Ω—è —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç–∏—Ç—å.",
                           reply_markup=keyboards.kb_menu)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ —Å–æ—Ü —Å–µ—Ç–∏
@router.message(F.text == "üü¢ Telegram")
async def tg_handler(msg: Message):
    await msg.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å?",
                     reply_markup=keyboards.kb_yes_no)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–≤–∏—Ç—Ç–µ—Ä–∞
@router.message(StateFilter(None), F.text == "üî¥ Twitter")
async def tw_input_cookie(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \".txt\"."
                     "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.tw_inputing_cookie)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –∫—É–∫–∏ –¥–ª—è —Ç–≤–∏—Ç—Ç–µ—Ä–∞
@router.message(UserInput.tw_inputing_cookie, F.document)
async def tw_cookie_inputed(msg: Message, state: FSMContext, bot: Bot):
    extension = '.txt'
    path = 'database/uploaded_cookies'
    if extension in str(msg.document.file_name):
        os.chdir(path)
        if not os.path.isdir(str(msg.from_user.id)):
            os.mkdir(str(msg.from_user.id))
            print('–ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')
        os.chdir('../..')

        await bot.download(
            msg.document.file_id,
            destination=f"{path}/{str(msg.from_user.id)}/tw_cookie.txt"
        )

        await db.update_cookie(msg.from_user.id, "tw_cookie.txt")
        await msg.answer("–ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
        os.chdir(f'{path}/{str(msg.from_user.id)}')
        for paths, dirs, files in os.walk(os.getcwd()):
            for file in files:
                os.remove(file)
            break
        os.chdir('../../..')
        await state.clear()
        networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

        await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                         reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                             resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º \".txt\"?")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–≤–∏—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ —Å–æ—Ü —Å–µ—Ç–∏
@router.message(F.text == "üü¢ Twitter")
async def tw_handler(msg: Message, state: FSMContext):
    await msg.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å?",
                     reply_markup=keyboards.kb_yes_no)
    await state.set_state(UserInput.tw_unsigning)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–∏ —Ç–≤–∏—Ç—Ç–µ—Ä
@router.message(UserInput.tw_unsigning, F.text == "–î–∞‚úîÔ∏è")
async def tw_handler(msg: Message, state: FSMContext):
    await db.delete_tw_cookie(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —Å–æ—Ü. —Å–µ—Ç—å.")
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    await state.clear()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–∏ —Ç–≤–∏—Ç—Ç–µ—Ä
@router.message(UserInput.tw_unsigning, F.text == "–ù–µ—Ç‚ùå")
async def tw_handler(msg: Message, state: FSMContext):
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    await state.clear()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º
@router.message(F.text == "–î–∞‚úîÔ∏è")
async def tg_handler(msg: Message):
    await db.delete_tg_channel_id(msg.from_user.id)
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ—Ü —Å–µ—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º
@router.message(F.text == "–ù–µ—Ç‚ùå")
async def tg_handler(msg: Message):
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc_list(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc_list(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@router.message(Command('start'))
async def start_handler(msg: Message):
    if await db.check(msg.from_user.id) is False:
        await db.insert_new_user(msg.from_user.id)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ü —Å–µ—Ç—è–º–∏. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.",
                     reply_markup=keyboards.kb_menu)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@router.message(F.text.lower().in_(greetings))
async def start_handler(msg: Message):
    if await db.check(msg.from_user.id) is False:
        await db.insert_new_user(msg.from_user.id)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ü —Å–µ—Ç—è–º–∏. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.",
                     reply_markup=keyboards.kb_menu)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥
@router.message()
async def unknown_handler(msg: Message):
    await msg.reply("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüò¢\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å \"\start\" –∏–ª–∏ \"–ü—Ä–∏–≤–µ—Ç\"!")
