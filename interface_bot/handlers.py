from aiogram import types, F, Router, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, IS_NOT_MEMBER, ADMINISTRATOR

import interface_bot.keyboards as keyboards
from utils.check_link import check_linked_soc
from database.init_db import database as db


router = Router()

greetings = ["–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç", "Privet", "privet", "qq", "–∑–∫—à–º—É–µ", "–ó–∫—à–º—É–µ", "Ghbdtn", "ghbdtn"]

channel_start = "-100"


class UserInput(StatesGroup):
    vk_inputing_cookie = State()
    vk_inputing_link = State()
    vk_unsigning = State()
    tw_inputing_cookie = State()
    tw_unsigning = State()
    tg_inputing_channel = State()
    tg_adding_admin = State()
    posting = State()


@router.message(Command('start'))
async def start_handler(msg: Message):
    if await db.check(msg.from_user.id) is False:
        await db.insert_new_user(msg.from_user.id)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ü —Å–µ—Ç—è–º–∏. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text.in_(greetings))
async def start_handler(msg: Message):
    if await db.check(msg.from_user.id) is False:
        await db.insert_new_user(msg.from_user.id)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ü —Å–µ—Ç—è–º–∏. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éüéì")
async def menu_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("<u>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</u>",
                     reply_markup=keyboards.kb_menu,parse_mode=ParseMode.HTML)


@router.message(F.text == "–ú–µ–Ω—é‚ò∞")
async def menu_handler(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ‚¨áÔ∏è.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text == "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ—Ü. —Å–µ—Ç–∏üìù")
async def check_networks_handler(msg: Message):

    networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Çüí¨")
async def create_post_handler(msg: Message, state: FSMContext):
    # —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    await msg.answer("–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.",
                     reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.posting)


@router.message(UserInput.posting)
async def posting(msg: Message, state: FSMContext):
    json_f = msg.model_dump_json()
    print(json_f)
    await msg.answer("–ù–æ—Ä–º.",
                     reply_markup=types.ReplyKeyboardRemove())


@router.message(StateFilter(None), F.text == "üî¥ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk_input_cookie(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \".txt\"."
                     "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.vk_inputing_cookie)


@router.message(UserInput.vk_inputing_cookie, F.document)
async def vk_cookie_inputed(msg: Message, state: FSMContext, bot: Bot):
    extension = '.txt'

    if extension in str(msg.document.file_name):
        path = "database/uploaded_cookies/vk_cookie.txt"
        await bot.download(
            msg.document.file_id,
            destination=path
        )
        await db.update_cookie(msg.from_user.id, ["vk_cookie.txt"])
        await msg.answer("–ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        if (await db.check_link_vk(msg.from_user.id)) is False:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∏–Ω–≥.",
                             reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(UserInput.vk_inputing_link)
        else:
            networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

            await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                             reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                                 resize_keyboard=True,
                                 input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º \".txt\"?")


@router.message(UserInput.vk_inputing_link)
async def vk_link_inputed(msg: Message, state: FSMContext, bot: Bot):
    start = 'https://vk.com/'
    if start in str(msg.text):
        await db.insert_link_vk(msg.from_user.id, msg.text)
        await msg.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É: {msg.text}")
        await state.clear()
        networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

        await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                         reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                             resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑.")


@router.message(F.text == "üü¢ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk_handler(msg: Message, state: FSMContext):
    await msg.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                     reply_markup=keyboards.kb_change_link)
    await state.set_state(UserInput.vk_unsigning)


@router.message(StateFilter(UserInput.vk_unsigning), F.text == "–û—Ç–≤—è–∑–∞—Ç—å —Å–æ—Ü. —Å–µ—Ç—åüóëÔ∏è")
async def vk_unsigning(msg: Message, state: FSMContext):
    await db.delete_vk_cookie(msg.from_user.id)
    await db.delete_link_vk(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü. —Å–µ—Ç—å.")
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    await state.clear()


@router.message(StateFilter(UserInput.vk_unsigning), F.text == "–ü–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∏–Ω–≥–∞")
async def vk_unsigning(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∏–Ω–≥.",
                     reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.vk_inputing_link)


@router.message(F.text == "üî¥ Telegram")
async def tg_handler(msg: Message, state: FSMContext):
    await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å, –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                     reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.tg_inputing_channel)


@router.message(UserInput.tg_inputing_channel)
async def tg_inputer(msg: Message, state: FSMContext):

    if msg.forward_origin:
        await db.insert_tg_channel_id(msg.from_user.id, str(msg.forward_origin.chat.id))
        await msg.answer("Id —á–∞—Ç–∞ —Ç–≥ –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

    elif channel_start in msg.text:
        await db.insert_tg_channel_id(msg.from_user.id, msg.text)
        await msg.answer("Id —á–∞—Ç–∞ —Ç–≥ –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ Id —á–∞—Ç–∞? Id —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å \"-100\"",
                         reply_markup=types.ReplyKeyboardRemove())


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> ADMINISTRATOR))
async def tg_adding_admn(msg: Message, bot: Bot):
    await bot.send_message(msg.from_user.id,
                           "–¢–µ–ø–µ—Ä—å —è –∞–¥–º–∏–Ω, –ø–æ—Å—Ç–∏–Ω–≥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏–≤—è–∑–∞–Ω.",
                           reply_markup=keyboards.kb_menu)


@router.message(F.text == "üü¢ Telegram")
async def tg_handler(msg: Message):
    await db.delete_tg_channel_id(msg.from_user.id)
    await msg.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å.")
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


@router.message(StateFilter(None), F.text == "üî¥ Twitter")
async def tw_input_cookie(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \".txt\"."
                     "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInput.tw_inputing_cookie)


@router.message(UserInput.tw_inputing_cookie, F.document)
async def tw_cookie_inputed(msg: Message, state: FSMContext, bot: Bot):
    extension = '.txt'

    if extension in str(msg.document.file_name):
        path = "database/uploaded_cookies/vk_cookie.txt"
        await bot.download(
            msg.document.file_id,
            destination=path
        )
        await db.update_cookie(msg.from_user.id, ["tw_cookie.txt"])
        await msg.answer("–ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

        await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                         reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                             resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º \".txt\"?")


@router.message(F.text == "üü¢ Twitter")
async def tw_handler(msg: Message):
    await db.delete_tw_cookie(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å.")
    networks_str = keyboards.str_with_soc_networks(await check_linked_soc(msg))

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(await check_linked_soc(msg)).as_markup(
                         resize_keyboard=True, input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


@router.message()
async def unknown_handler(msg: Message):
    await msg.reply("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüò¢\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å \"\start\" –∏–ª–∏ \"–ü—Ä–∏–≤–µ—Ç\"!")
