from aiogram import types, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram import Bot
import os
import interface_bot.keyboards as keyboards
from database.db_user import DB_Users

router = Router()

db = DB_Users()


class User_input(StatesGroup):
    vk_inputing_cookie = State()
    vk_inputing_link = State()
    tw_inputing_cookie = State()
    tg_inputing_channel = State()


@router.message(Command('start'))
async def start_handler(msg: Message):
    if await db.check(msg.from_user.id) is False:
        await db.insert_new_user(msg.from_user.id)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ü —Å–µ—Ç—è–º–∏. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text == '–ü—Ä–∏–≤–µ—Ç')
async def start_handler(msg: Message):
    if await db.check(msg.from_user.id) is False:
        await db.insert_new_user(msg.from_user.id)

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ü —Å–µ—Ç—è–º–∏. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text == "–ú–µ–Ω—é‚ò∞")
async def menu_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ‚¨áÔ∏è.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text == "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ—Ü. —Å–µ—Ç–∏üìù")
async def check_networks_handler(msg: Message):
    user = await db.get_data_user(msg.from_user.id)

    usr_list = list(user[1:])

    networks = []

    for elem in usr_list:
        if bool(elem) is True:
            networks.append(1)
        else:
            networks.append(0)

    networks_str = keyboards.str_with_soc_networks(networks)

    await msg.answer(networks_str, parse_mode=ParseMode.HTML,
                     reply_markup=keyboards.reply_kb_builder(networks).as_markup(resize_keyboard=True,
                                                                                 input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ"))


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Çüí¨")
async def create_post_handler(msg: Message):
    # —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    await msg.answer("–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å.",
                     reply_markup=keyboards.kb_networks)


@router.message(StateFilter(None), F.text == "üî¥ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk_handler(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, —Ñ–æ—Ä–º–∞—Ç –∫—É–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \"*–Ω–∞–∑–≤–∞–Ω–∏–µ—Å–æ—Ü—Å–µ—Ç–∏*_cookie.txt\"."
                     "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n")
    await state.set_state(User_input.vk_inputing_cookie)


@router.message(F.text == "üü¢ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk_handler(msg: Message):
    await db.delete_link_vk(msg.from_user.id)
    await db.delete_vk_cookie(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å.",
                     reply_markup=keyboards.kb_menu)

@router.message(F.text == "üî¥ Telegram")
async def tg_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ‚¨áÔ∏è.",
                     reply_markup=keyboards.kb_networks)


@router.message(F.text == "üü¢ Telegram")
async def vk_handler(msg: Message):
    await db.delete_tg_channel_id(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å.",
                     reply_markup=keyboards.kb_menu)


@router.message(F.text == "üî¥ Twitter")
async def tw_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ‚¨áÔ∏è.",
                     reply_markup=keyboards.kb_networks)


@router.message(F.text == "üü¢ Twitter")
async def tw_handler(msg: Message):
    await db.delete_tw_cookie(msg.from_user.id)
    await msg.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —ç—Ç—É —Å–æ—Ü —Å–µ—Ç—å.",
                     reply_markup=keyboards.kb_menu)


@router.message(StateFilter(None), F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ—Ü. —Å–µ—Ç—åüÜï")
async def add_soc_net_handler(msg: Message, state: FSMContext):
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫—É–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–æ—Ü. —Å–µ—Ç–∏, —Ñ–æ—Ä–º–∞—Ç –∫—É–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \"*–Ω–∞–∑–≤–∞–Ω–∏–µ—Å–æ—Ü—Å–µ—Ç–∏*_cookie.txt\"."
                     "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n")
    await state.set_state(User_input.inputing_cookie)



@router.message(F.text == "–û—Ç–≤—è–∑–∞—Ç—å —Å–æ—Ü. —Å–µ—Ç—åüóëÔ∏èÔ∏è")
async def rm_soc_net_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ‚¨áÔ∏è.",
                     reply_markup=keyboards.kb_networks)


# @router.message(User_input.inputing_cookie, F.document)
# async def inputing_cookie(msg: Message, bot: Bot):
#     await bot.download(
#         msg.document.file_id,
#         destination=f"./upload_cookies/{msg.file_id}.txt"
#     )


@router.message()
async def unknown_handler(msg: Message):
    await msg.reply("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüò¢\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å \"\start\" –∏–ª–∏ \"–ü—Ä–∏–≤–µ—Ç\"!")
